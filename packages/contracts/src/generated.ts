// Generated by @wagmi/cli@0.1.15 on 2023/4/15 at 16:30:50
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILensHub
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLensHubABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'collect',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.CollectWithSigData',
        type: 'tuple',
        components: [
          { name: 'collector', internalType: 'address', type: 'address' },
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'pubId', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'collectWithSig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.CommentData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'contentURI', internalType: 'string', type: 'string' },
          {
            name: 'profileIdPointed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pubIdPointed', internalType: 'uint256', type: 'uint256' },
          { name: 'referenceModuleData', internalType: 'bytes', type: 'bytes' },
          { name: 'collectModule', internalType: 'address', type: 'address' },
          {
            name: 'collectModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          { name: 'referenceModule', internalType: 'address', type: 'address' },
          {
            name: 'referenceModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
        ],
      },
    ],
    name: 'comment',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.CommentWithSigData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'contentURI', internalType: 'string', type: 'string' },
          {
            name: 'profileIdPointed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pubIdPointed', internalType: 'uint256', type: 'uint256' },
          { name: 'referenceModuleData', internalType: 'bytes', type: 'bytes' },
          { name: 'collectModule', internalType: 'address', type: 'address' },
          {
            name: 'collectModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          { name: 'referenceModule', internalType: 'address', type: 'address' },
          {
            name: 'referenceModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'commentWithSig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.CreateProfileData',
        type: 'tuple',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'handle', internalType: 'string', type: 'string' },
          { name: 'imageURI', internalType: 'string', type: 'string' },
          { name: 'followModule', internalType: 'address', type: 'address' },
          {
            name: 'followModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          { name: 'followNFTURI', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'createProfile',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'wallet', internalType: 'address', type: 'address' }],
    name: 'defaultProfile',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
      { name: 'collectNFTId', internalType: 'uint256', type: 'uint256' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'emitCollectNFTTransferEvent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'followNFTId', internalType: 'uint256', type: 'uint256' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'emitFollowNFTTransferEvent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'datas', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'follow',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.FollowWithSigData',
        type: 'tuple',
        components: [
          { name: 'follower', internalType: 'address', type: 'address' },
          { name: 'profileIds', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'datas', internalType: 'bytes[]', type: 'bytes[]' },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'followWithSig',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCollectModule',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getCollectNFT',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCollectNFTImpl',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getContentURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'getDispatcher',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'getFollowModule',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'getFollowNFT',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFollowNFTImpl',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'getFollowNFTURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGovernance',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'getHandle',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProfile',
    outputs: [
      {
        name: '',
        internalType: 'struct LensDataTypes.ProfileStruct',
        type: 'tuple',
        components: [
          { name: 'pubCount', internalType: 'uint256', type: 'uint256' },
          { name: 'followModule', internalType: 'address', type: 'address' },
          { name: 'followNFT', internalType: 'address', type: 'address' },
          { name: 'handle', internalType: 'string', type: 'string' },
          { name: 'imageURI', internalType: 'string', type: 'string' },
          { name: 'followNFTURI', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'handle', internalType: 'string', type: 'string' }],
    name: 'getProfileIdByHandle',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPub',
    outputs: [
      {
        name: '',
        internalType: 'struct LensDataTypes.PublicationStruct',
        type: 'tuple',
        components: [
          {
            name: 'profileIdPointed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pubIdPointed', internalType: 'uint256', type: 'uint256' },
          { name: 'contentURI', internalType: 'string', type: 'string' },
          { name: 'referenceModule', internalType: 'address', type: 'address' },
          { name: 'collectModule', internalType: 'address', type: 'address' },
          { name: 'collectNFT', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'getPubCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPubPointer',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPubType',
    outputs: [
      { name: '', internalType: 'enum LensDataTypes.PubType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getReferenceModule',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'newGovernance', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collectModule', internalType: 'address', type: 'address' },
    ],
    name: 'isCollectModuleWhitelisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'followModule', internalType: 'address', type: 'address' },
    ],
    name: 'isFollowModuleWhitelisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'profileCreator', internalType: 'address', type: 'address' },
    ],
    name: 'isProfileCreatorWhitelisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'referenceModule', internalType: 'address', type: 'address' },
    ],
    name: 'isReferenceModuleWhitelisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.MirrorData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'profileIdPointed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pubIdPointed', internalType: 'uint256', type: 'uint256' },
          { name: 'referenceModuleData', internalType: 'bytes', type: 'bytes' },
          { name: 'referenceModule', internalType: 'address', type: 'address' },
          {
            name: 'referenceModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
        ],
      },
    ],
    name: 'mirror',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.MirrorWithSigData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'profileIdPointed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pubIdPointed', internalType: 'uint256', type: 'uint256' },
          { name: 'referenceModuleData', internalType: 'bytes', type: 'bytes' },
          { name: 'referenceModule', internalType: 'address', type: 'address' },
          {
            name: 'referenceModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'mirrorWithSig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.PostData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'contentURI', internalType: 'string', type: 'string' },
          { name: 'collectModule', internalType: 'address', type: 'address' },
          {
            name: 'collectModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          { name: 'referenceModule', internalType: 'address', type: 'address' },
          {
            name: 'referenceModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
        ],
      },
    ],
    name: 'post',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.PostWithSigData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'contentURI', internalType: 'string', type: 'string' },
          { name: 'collectModule', internalType: 'address', type: 'address' },
          {
            name: 'collectModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          { name: 'referenceModule', internalType: 'address', type: 'address' },
          {
            name: 'referenceModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'postWithSig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'setDefaultProfile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.SetDefaultProfileWithSigData',
        type: 'tuple',
        components: [
          { name: 'wallet', internalType: 'address', type: 'address' },
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'setDefaultProfileWithSig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'dispatcher', internalType: 'address', type: 'address' },
    ],
    name: 'setDispatcher',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.SetDispatcherWithSigData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'dispatcher', internalType: 'address', type: 'address' },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'setDispatcherWithSig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newEmergencyAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'setEmergencyAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'followModule', internalType: 'address', type: 'address' },
      { name: 'followModuleInitData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setFollowModule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.SetFollowModuleWithSigData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'followModule', internalType: 'address', type: 'address' },
          {
            name: 'followModuleInitData',
            internalType: 'bytes',
            type: 'bytes',
          },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'setFollowModuleWithSig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'followNFTURI', internalType: 'string', type: 'string' },
    ],
    name: 'setFollowNFTURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.SetFollowNFTURIWithSigData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'followNFTURI', internalType: 'string', type: 'string' },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'setFollowNFTURIWithSig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newGovernance', internalType: 'address', type: 'address' },
    ],
    name: 'setGovernance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'imageURI', internalType: 'string', type: 'string' },
    ],
    name: 'setProfileImageURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'vars',
        internalType: 'struct LensDataTypes.SetProfileImageURIWithSigData',
        type: 'tuple',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'imageURI', internalType: 'string', type: 'string' },
          {
            name: 'sig',
            internalType: 'struct LensDataTypes.EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
              { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'setProfileImageURIWithSig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newState',
        internalType: 'enum LensDataTypes.ProtocolState',
        type: 'uint8',
      },
    ],
    name: 'setState',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collectModule', internalType: 'address', type: 'address' },
      { name: 'whitelist', internalType: 'bool', type: 'bool' },
    ],
    name: 'whitelistCollectModule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'followModule', internalType: 'address', type: 'address' },
      { name: 'whitelist', internalType: 'bool', type: 'bool' },
    ],
    name: 'whitelistFollowModule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileCreator', internalType: 'address', type: 'address' },
      { name: 'whitelist', internalType: 'bool', type: 'bool' },
    ],
    name: 'whitelistProfileCreator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'referenceModule', internalType: 'address', type: 'address' },
      { name: 'whitelist', internalType: 'bool', type: 'bool' },
    ],
    name: 'whitelistReferenceModule',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LensBalus
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lensBalusABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'hub', internalType: 'address', type: 'address' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'infoCid',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'contentCid',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'partnerRequests',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'AnnouncementCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HUB',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'announcements',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'infoCid', internalType: 'string', type: 'string' },
      { name: 'contentCid', internalType: 'string', type: 'string' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'announcementId', internalType: 'uint256', type: 'uint256' },
      { name: 'partnerRequestIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'becomePartner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'infoCid', internalType: 'string', type: 'string' },
      { name: 'contentCid', internalType: 'string', type: 'string' },
      { name: 'partnerRequests', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'createAnnouncement',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'getPartnerRequests',
    outputs: [
      {
        name: '',
        internalType: 'struct LensBalus.PartnerRequest[]',
        type: 'tuple[]',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'isAccepted', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'getPartners',
    outputs: [
      {
        name: '',
        internalType: 'struct LensBalus.Partner[]',
        type: 'tuple[]',
        components: [
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
          { name: 'pubId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'announcementId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'post',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LensBalusDeployment
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lensBalusDeploymentABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LensCampaignPublisher
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lensCampaignPublisherABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'hub', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HUB',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'campaignId', internalType: 'uint256', type: 'uint256' },
      { name: 'InviteeIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'contentCid', internalType: 'string', type: 'string' },
      { name: 'pinataContentId', internalType: 'string', type: 'string' },
    ],
    name: 'addPublishment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'campaigns',
    outputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'contentCid', internalType: 'string', type: 'string' },
      { name: 'pinataContentId', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'contentCid', internalType: 'string', type: 'string' },
      { name: 'pinataContentId', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint128', type: 'uint128' },
      {
        name: 'invitees',
        internalType: 'struct LensCampaignPublisher.Invitee[]',
        type: 'tuple[]',
        components: [
          { name: 'handle', internalType: 'string', type: 'string' },
          { name: 'profileId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'createCampaign',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'campaignId', internalType: 'uint256', type: 'uint256' }],
    name: 'postPublishments',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'profileId', internalType: 'uint256', type: 'uint256' },
      { name: 'contentURI', internalType: 'string', type: 'string' },
    ],
    name: 'test',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iLensHubABI}__.
 */
export function useILensHub(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iLensHubABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__.
 */
export function useILensHubRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iLensHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"defaultProfile"`.
 */
export function useILensHubDefaultProfile<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'defaultProfile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'defaultProfile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'defaultProfile',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'defaultProfile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getCollectModule"`.
 */
export function useILensHubGetCollectModule<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getCollectModule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getCollectModule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getCollectModule',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'getCollectModule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getCollectNFT"`.
 */
export function useILensHubGetCollectNft<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getCollectNFT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getCollectNFT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getCollectNFT',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getCollectNFT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getCollectNFTImpl"`.
 */
export function useILensHubGetCollectNftImpl<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getCollectNFTImpl'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getCollectNFTImpl', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getCollectNFTImpl',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'getCollectNFTImpl',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getContentURI"`.
 */
export function useILensHubGetContentUri<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getContentURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getContentURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getContentURI',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getContentURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getDispatcher"`.
 */
export function useILensHubGetDispatcher<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getDispatcher'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getDispatcher', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getDispatcher',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getDispatcher', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getFollowModule"`.
 */
export function useILensHubGetFollowModule<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getFollowModule'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getFollowModule', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getFollowModule',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'getFollowModule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getFollowNFT"`.
 */
export function useILensHubGetFollowNft<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getFollowNFT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getFollowNFT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getFollowNFT',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getFollowNFT', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getFollowNFTImpl"`.
 */
export function useILensHubGetFollowNftImpl<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getFollowNFTImpl'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getFollowNFTImpl', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getFollowNFTImpl',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'getFollowNFTImpl',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getFollowNFTURI"`.
 */
export function useILensHubGetFollowNfturi<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getFollowNFTURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getFollowNFTURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getFollowNFTURI',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'getFollowNFTURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getGovernance"`.
 */
export function useILensHubGetGovernance<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getGovernance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getGovernance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getGovernance',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getGovernance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getHandle"`.
 */
export function useILensHubGetHandle<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getHandle'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getHandle', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getHandle',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getHandle', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getProfile"`.
 */
export function useILensHubGetProfile<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getProfile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getProfile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getProfile',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getProfile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getProfileIdByHandle"`.
 */
export function useILensHubGetProfileIdByHandle<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getProfileIdByHandle'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLensHubABI,
      'getProfileIdByHandle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getProfileIdByHandle',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'getProfileIdByHandle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getPub"`.
 */
export function useILensHubGetPub<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getPub'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getPub', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getPub',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getPub', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getPubCount"`.
 */
export function useILensHubGetPubCount<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getPubCount'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getPubCount', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getPubCount',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getPubCount', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getPubPointer"`.
 */
export function useILensHubGetPubPointer<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getPubPointer'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getPubPointer', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getPubPointer',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getPubPointer', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getPubType"`.
 */
export function useILensHubGetPubType<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getPubType'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iLensHubABI, 'getPubType', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getPubType',
    ...config,
  } as UseContractReadConfig<typeof iLensHubABI, 'getPubType', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"getReferenceModule"`.
 */
export function useILensHubGetReferenceModule<
  TSelectData = ReadContractResult<typeof iLensHubABI, 'getReferenceModule'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLensHubABI,
      'getReferenceModule',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'getReferenceModule',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'getReferenceModule',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"isCollectModuleWhitelisted"`.
 */
export function useILensHubIsCollectModuleWhitelisted<
  TSelectData = ReadContractResult<
    typeof iLensHubABI,
    'isCollectModuleWhitelisted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLensHubABI,
      'isCollectModuleWhitelisted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'isCollectModuleWhitelisted',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'isCollectModuleWhitelisted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"isFollowModuleWhitelisted"`.
 */
export function useILensHubIsFollowModuleWhitelisted<
  TSelectData = ReadContractResult<
    typeof iLensHubABI,
    'isFollowModuleWhitelisted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLensHubABI,
      'isFollowModuleWhitelisted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'isFollowModuleWhitelisted',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'isFollowModuleWhitelisted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"isProfileCreatorWhitelisted"`.
 */
export function useILensHubIsProfileCreatorWhitelisted<
  TSelectData = ReadContractResult<
    typeof iLensHubABI,
    'isProfileCreatorWhitelisted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLensHubABI,
      'isProfileCreatorWhitelisted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'isProfileCreatorWhitelisted',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'isProfileCreatorWhitelisted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"isReferenceModuleWhitelisted"`.
 */
export function useILensHubIsReferenceModuleWhitelisted<
  TSelectData = ReadContractResult<
    typeof iLensHubABI,
    'isReferenceModuleWhitelisted'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iLensHubABI,
      'isReferenceModuleWhitelisted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLensHubABI,
    functionName: 'isReferenceModuleWhitelisted',
    ...config,
  } as UseContractReadConfig<
    typeof iLensHubABI,
    'isReferenceModuleWhitelisted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__.
 */
export function useILensHubWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iLensHubABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, TFunctionName>({
    abi: iLensHubABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"collect"`.
 */
export function useILensHubCollect<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'collect'>['abi'],
        'collect'
      > & { functionName?: 'collect' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'collect'> & {
        abi?: never
        functionName?: 'collect'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'collect'>({
    abi: iLensHubABI,
    functionName: 'collect',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"collectWithSig"`.
 */
export function useILensHubCollectWithSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'collectWithSig'>['abi'],
        'collectWithSig'
      > & { functionName?: 'collectWithSig' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'collectWithSig'> & {
        abi?: never
        functionName?: 'collectWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'collectWithSig'>({
    abi: iLensHubABI,
    functionName: 'collectWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"comment"`.
 */
export function useILensHubComment<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'comment'>['abi'],
        'comment'
      > & { functionName?: 'comment' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'comment'> & {
        abi?: never
        functionName?: 'comment'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'comment'>({
    abi: iLensHubABI,
    functionName: 'comment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"commentWithSig"`.
 */
export function useILensHubCommentWithSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'commentWithSig'>['abi'],
        'commentWithSig'
      > & { functionName?: 'commentWithSig' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'commentWithSig'> & {
        abi?: never
        functionName?: 'commentWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'commentWithSig'>({
    abi: iLensHubABI,
    functionName: 'commentWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"createProfile"`.
 */
export function useILensHubCreateProfile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'createProfile'>['abi'],
        'createProfile'
      > & { functionName?: 'createProfile' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'createProfile'> & {
        abi?: never
        functionName?: 'createProfile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'createProfile'>({
    abi: iLensHubABI,
    functionName: 'createProfile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"emitCollectNFTTransferEvent"`.
 */
export function useILensHubEmitCollectNftTransferEvent<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'emitCollectNFTTransferEvent'
        >['abi'],
        'emitCollectNFTTransferEvent'
      > & { functionName?: 'emitCollectNFTTransferEvent' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'emitCollectNFTTransferEvent'
      > & {
        abi?: never
        functionName?: 'emitCollectNFTTransferEvent'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iLensHubABI,
    'emitCollectNFTTransferEvent'
  >({
    abi: iLensHubABI,
    functionName: 'emitCollectNFTTransferEvent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"emitFollowNFTTransferEvent"`.
 */
export function useILensHubEmitFollowNftTransferEvent<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'emitFollowNFTTransferEvent'
        >['abi'],
        'emitFollowNFTTransferEvent'
      > & { functionName?: 'emitFollowNFTTransferEvent' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'emitFollowNFTTransferEvent'
      > & {
        abi?: never
        functionName?: 'emitFollowNFTTransferEvent'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iLensHubABI,
    'emitFollowNFTTransferEvent'
  >({
    abi: iLensHubABI,
    functionName: 'emitFollowNFTTransferEvent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"follow"`.
 */
export function useILensHubFollow<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'follow'>['abi'],
        'follow'
      > & { functionName?: 'follow' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'follow'> & {
        abi?: never
        functionName?: 'follow'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'follow'>({
    abi: iLensHubABI,
    functionName: 'follow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"followWithSig"`.
 */
export function useILensHubFollowWithSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'followWithSig'>['abi'],
        'followWithSig'
      > & { functionName?: 'followWithSig' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'followWithSig'> & {
        abi?: never
        functionName?: 'followWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'followWithSig'>({
    abi: iLensHubABI,
    functionName: 'followWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"initialize"`.
 */
export function useILensHubInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'initialize'>({
    abi: iLensHubABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"mirror"`.
 */
export function useILensHubMirror<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'mirror'>['abi'],
        'mirror'
      > & { functionName?: 'mirror' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'mirror'> & {
        abi?: never
        functionName?: 'mirror'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'mirror'>({
    abi: iLensHubABI,
    functionName: 'mirror',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"mirrorWithSig"`.
 */
export function useILensHubMirrorWithSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'mirrorWithSig'>['abi'],
        'mirrorWithSig'
      > & { functionName?: 'mirrorWithSig' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'mirrorWithSig'> & {
        abi?: never
        functionName?: 'mirrorWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'mirrorWithSig'>({
    abi: iLensHubABI,
    functionName: 'mirrorWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"post"`.
 */
export function useILensHubPost<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'post'>['abi'],
        'post'
      > & { functionName?: 'post' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'post'> & {
        abi?: never
        functionName?: 'post'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'post'>({
    abi: iLensHubABI,
    functionName: 'post',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"postWithSig"`.
 */
export function useILensHubPostWithSig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'postWithSig'>['abi'],
        'postWithSig'
      > & { functionName?: 'postWithSig' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'postWithSig'> & {
        abi?: never
        functionName?: 'postWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'postWithSig'>({
    abi: iLensHubABI,
    functionName: 'postWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDefaultProfile"`.
 */
export function useILensHubSetDefaultProfile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setDefaultProfile'
        >['abi'],
        'setDefaultProfile'
      > & { functionName?: 'setDefaultProfile' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'setDefaultProfile'> & {
        abi?: never
        functionName?: 'setDefaultProfile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setDefaultProfile'>({
    abi: iLensHubABI,
    functionName: 'setDefaultProfile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDefaultProfileWithSig"`.
 */
export function useILensHubSetDefaultProfileWithSig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setDefaultProfileWithSig'
        >['abi'],
        'setDefaultProfileWithSig'
      > & { functionName?: 'setDefaultProfileWithSig' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'setDefaultProfileWithSig'
      > & {
        abi?: never
        functionName?: 'setDefaultProfileWithSig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iLensHubABI,
    'setDefaultProfileWithSig'
  >({
    abi: iLensHubABI,
    functionName: 'setDefaultProfileWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDispatcher"`.
 */
export function useILensHubSetDispatcher<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'setDispatcher'>['abi'],
        'setDispatcher'
      > & { functionName?: 'setDispatcher' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'setDispatcher'> & {
        abi?: never
        functionName?: 'setDispatcher'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setDispatcher'>({
    abi: iLensHubABI,
    functionName: 'setDispatcher',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDispatcherWithSig"`.
 */
export function useILensHubSetDispatcherWithSig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setDispatcherWithSig'
        >['abi'],
        'setDispatcherWithSig'
      > & { functionName?: 'setDispatcherWithSig' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'setDispatcherWithSig'
      > & {
        abi?: never
        functionName?: 'setDispatcherWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setDispatcherWithSig'>({
    abi: iLensHubABI,
    functionName: 'setDispatcherWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setEmergencyAdmin"`.
 */
export function useILensHubSetEmergencyAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setEmergencyAdmin'
        >['abi'],
        'setEmergencyAdmin'
      > & { functionName?: 'setEmergencyAdmin' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'setEmergencyAdmin'> & {
        abi?: never
        functionName?: 'setEmergencyAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setEmergencyAdmin'>({
    abi: iLensHubABI,
    functionName: 'setEmergencyAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowModule"`.
 */
export function useILensHubSetFollowModule<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setFollowModule'
        >['abi'],
        'setFollowModule'
      > & { functionName?: 'setFollowModule' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'setFollowModule'> & {
        abi?: never
        functionName?: 'setFollowModule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setFollowModule'>({
    abi: iLensHubABI,
    functionName: 'setFollowModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowModuleWithSig"`.
 */
export function useILensHubSetFollowModuleWithSig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setFollowModuleWithSig'
        >['abi'],
        'setFollowModuleWithSig'
      > & { functionName?: 'setFollowModuleWithSig' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'setFollowModuleWithSig'
      > & {
        abi?: never
        functionName?: 'setFollowModuleWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setFollowModuleWithSig'>({
    abi: iLensHubABI,
    functionName: 'setFollowModuleWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowNFTURI"`.
 */
export function useILensHubSetFollowNfturi<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setFollowNFTURI'
        >['abi'],
        'setFollowNFTURI'
      > & { functionName?: 'setFollowNFTURI' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'setFollowNFTURI'> & {
        abi?: never
        functionName?: 'setFollowNFTURI'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setFollowNFTURI'>({
    abi: iLensHubABI,
    functionName: 'setFollowNFTURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowNFTURIWithSig"`.
 */
export function useILensHubSetFollowNfturiWithSig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setFollowNFTURIWithSig'
        >['abi'],
        'setFollowNFTURIWithSig'
      > & { functionName?: 'setFollowNFTURIWithSig' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'setFollowNFTURIWithSig'
      > & {
        abi?: never
        functionName?: 'setFollowNFTURIWithSig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setFollowNFTURIWithSig'>({
    abi: iLensHubABI,
    functionName: 'setFollowNFTURIWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setGovernance"`.
 */
export function useILensHubSetGovernance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'setGovernance'>['abi'],
        'setGovernance'
      > & { functionName?: 'setGovernance' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'setGovernance'> & {
        abi?: never
        functionName?: 'setGovernance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setGovernance'>({
    abi: iLensHubABI,
    functionName: 'setGovernance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setProfileImageURI"`.
 */
export function useILensHubSetProfileImageUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setProfileImageURI'
        >['abi'],
        'setProfileImageURI'
      > & { functionName?: 'setProfileImageURI' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'setProfileImageURI'
      > & {
        abi?: never
        functionName?: 'setProfileImageURI'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setProfileImageURI'>({
    abi: iLensHubABI,
    functionName: 'setProfileImageURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setProfileImageURIWithSig"`.
 */
export function useILensHubSetProfileImageUriWithSig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'setProfileImageURIWithSig'
        >['abi'],
        'setProfileImageURIWithSig'
      > & { functionName?: 'setProfileImageURIWithSig' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'setProfileImageURIWithSig'
      > & {
        abi?: never
        functionName?: 'setProfileImageURIWithSig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iLensHubABI,
    'setProfileImageURIWithSig'
  >({
    abi: iLensHubABI,
    functionName: 'setProfileImageURIWithSig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setState"`.
 */
export function useILensHubSetState<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLensHubABI, 'setState'>['abi'],
        'setState'
      > & { functionName?: 'setState' }
    : UseContractWriteConfig<TMode, typeof iLensHubABI, 'setState'> & {
        abi?: never
        functionName?: 'setState'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'setState'>({
    abi: iLensHubABI,
    functionName: 'setState',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistCollectModule"`.
 */
export function useILensHubWhitelistCollectModule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'whitelistCollectModule'
        >['abi'],
        'whitelistCollectModule'
      > & { functionName?: 'whitelistCollectModule' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'whitelistCollectModule'
      > & {
        abi?: never
        functionName?: 'whitelistCollectModule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'whitelistCollectModule'>({
    abi: iLensHubABI,
    functionName: 'whitelistCollectModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistFollowModule"`.
 */
export function useILensHubWhitelistFollowModule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'whitelistFollowModule'
        >['abi'],
        'whitelistFollowModule'
      > & { functionName?: 'whitelistFollowModule' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'whitelistFollowModule'
      > & {
        abi?: never
        functionName?: 'whitelistFollowModule'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'whitelistFollowModule'>({
    abi: iLensHubABI,
    functionName: 'whitelistFollowModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistProfileCreator"`.
 */
export function useILensHubWhitelistProfileCreator<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'whitelistProfileCreator'
        >['abi'],
        'whitelistProfileCreator'
      > & { functionName?: 'whitelistProfileCreator' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'whitelistProfileCreator'
      > & {
        abi?: never
        functionName?: 'whitelistProfileCreator'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLensHubABI, 'whitelistProfileCreator'>(
    {
      abi: iLensHubABI,
      functionName: 'whitelistProfileCreator',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistReferenceModule"`.
 */
export function useILensHubWhitelistReferenceModule<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLensHubABI,
          'whitelistReferenceModule'
        >['abi'],
        'whitelistReferenceModule'
      > & { functionName?: 'whitelistReferenceModule' }
    : UseContractWriteConfig<
        TMode,
        typeof iLensHubABI,
        'whitelistReferenceModule'
      > & {
        abi?: never
        functionName?: 'whitelistReferenceModule'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iLensHubABI,
    'whitelistReferenceModule'
  >({
    abi: iLensHubABI,
    functionName: 'whitelistReferenceModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__.
 */
export function usePrepareILensHubWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"collect"`.
 */
export function usePrepareILensHubCollect(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'collect'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'collect',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'collect'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"collectWithSig"`.
 */
export function usePrepareILensHubCollectWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'collectWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'collectWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'collectWithSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"comment"`.
 */
export function usePrepareILensHubComment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'comment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'comment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'comment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"commentWithSig"`.
 */
export function usePrepareILensHubCommentWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'commentWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'commentWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'commentWithSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"createProfile"`.
 */
export function usePrepareILensHubCreateProfile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'createProfile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'createProfile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'createProfile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"emitCollectNFTTransferEvent"`.
 */
export function usePrepareILensHubEmitCollectNftTransferEvent(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLensHubABI,
      'emitCollectNFTTransferEvent'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'emitCollectNFTTransferEvent',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'emitCollectNFTTransferEvent'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"emitFollowNFTTransferEvent"`.
 */
export function usePrepareILensHubEmitFollowNftTransferEvent(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLensHubABI,
      'emitFollowNFTTransferEvent'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'emitFollowNFTTransferEvent',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'emitFollowNFTTransferEvent'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"follow"`.
 */
export function usePrepareILensHubFollow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'follow'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'follow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'follow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"followWithSig"`.
 */
export function usePrepareILensHubFollowWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'followWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'followWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'followWithSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareILensHubInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"mirror"`.
 */
export function usePrepareILensHubMirror(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'mirror'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'mirror',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'mirror'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"mirrorWithSig"`.
 */
export function usePrepareILensHubMirrorWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'mirrorWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'mirrorWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'mirrorWithSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"post"`.
 */
export function usePrepareILensHubPost(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'post'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'post',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'post'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"postWithSig"`.
 */
export function usePrepareILensHubPostWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'postWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'postWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'postWithSig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDefaultProfile"`.
 */
export function usePrepareILensHubSetDefaultProfile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setDefaultProfile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setDefaultProfile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setDefaultProfile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDefaultProfileWithSig"`.
 */
export function usePrepareILensHubSetDefaultProfileWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLensHubABI,
      'setDefaultProfileWithSig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setDefaultProfileWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'setDefaultProfileWithSig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDispatcher"`.
 */
export function usePrepareILensHubSetDispatcher(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setDispatcher'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setDispatcher',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setDispatcher'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setDispatcherWithSig"`.
 */
export function usePrepareILensHubSetDispatcherWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setDispatcherWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setDispatcherWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'setDispatcherWithSig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setEmergencyAdmin"`.
 */
export function usePrepareILensHubSetEmergencyAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setEmergencyAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setEmergencyAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setEmergencyAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowModule"`.
 */
export function usePrepareILensHubSetFollowModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setFollowModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setFollowModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setFollowModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowModuleWithSig"`.
 */
export function usePrepareILensHubSetFollowModuleWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setFollowModuleWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setFollowModuleWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'setFollowModuleWithSig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowNFTURI"`.
 */
export function usePrepareILensHubSetFollowNfturi(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setFollowNFTURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setFollowNFTURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setFollowNFTURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setFollowNFTURIWithSig"`.
 */
export function usePrepareILensHubSetFollowNfturiWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setFollowNFTURIWithSig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setFollowNFTURIWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'setFollowNFTURIWithSig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setGovernance"`.
 */
export function usePrepareILensHubSetGovernance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setGovernance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setGovernance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setGovernance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setProfileImageURI"`.
 */
export function usePrepareILensHubSetProfileImageUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setProfileImageURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setProfileImageURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setProfileImageURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setProfileImageURIWithSig"`.
 */
export function usePrepareILensHubSetProfileImageUriWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLensHubABI,
      'setProfileImageURIWithSig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setProfileImageURIWithSig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'setProfileImageURIWithSig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"setState"`.
 */
export function usePrepareILensHubSetState(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'setState'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'setState',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLensHubABI, 'setState'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistCollectModule"`.
 */
export function usePrepareILensHubWhitelistCollectModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'whitelistCollectModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'whitelistCollectModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'whitelistCollectModule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistFollowModule"`.
 */
export function usePrepareILensHubWhitelistFollowModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLensHubABI, 'whitelistFollowModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'whitelistFollowModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'whitelistFollowModule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistProfileCreator"`.
 */
export function usePrepareILensHubWhitelistProfileCreator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLensHubABI,
      'whitelistProfileCreator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'whitelistProfileCreator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'whitelistProfileCreator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLensHubABI}__ and `functionName` set to `"whitelistReferenceModule"`.
 */
export function usePrepareILensHubWhitelistReferenceModule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLensHubABI,
      'whitelistReferenceModule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLensHubABI,
    functionName: 'whitelistReferenceModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLensHubABI,
    'whitelistReferenceModule'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lensBalusABI}__.
 */
export function useLensBalus(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lensBalusABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensBalusABI}__.
 */
export function useLensBalusRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lensBalusABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensBalusABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lensBalusABI,
    ...config,
  } as UseContractReadConfig<typeof lensBalusABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"HUB"`.
 */
export function useLensBalusHub<
  TSelectData = ReadContractResult<typeof lensBalusABI, 'HUB'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensBalusABI, 'HUB', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensBalusABI,
    functionName: 'HUB',
    ...config,
  } as UseContractReadConfig<typeof lensBalusABI, 'HUB', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"announcements"`.
 */
export function useLensBalusAnnouncements<
  TSelectData = ReadContractResult<typeof lensBalusABI, 'announcements'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensBalusABI, 'announcements', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensBalusABI,
    functionName: 'announcements',
    ...config,
  } as UseContractReadConfig<typeof lensBalusABI, 'announcements', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"getPartnerRequests"`.
 */
export function useLensBalusGetPartnerRequests<
  TSelectData = ReadContractResult<typeof lensBalusABI, 'getPartnerRequests'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensBalusABI,
      'getPartnerRequests',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensBalusABI,
    functionName: 'getPartnerRequests',
    ...config,
  } as UseContractReadConfig<
    typeof lensBalusABI,
    'getPartnerRequests',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"getPartners"`.
 */
export function useLensBalusGetPartners<
  TSelectData = ReadContractResult<typeof lensBalusABI, 'getPartners'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensBalusABI, 'getPartners', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensBalusABI,
    functionName: 'getPartners',
    ...config,
  } as UseContractReadConfig<typeof lensBalusABI, 'getPartners', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensBalusABI}__.
 */
export function useLensBalusWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lensBalusABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof lensBalusABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensBalusABI, TFunctionName>({
    abi: lensBalusABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"becomePartner"`.
 */
export function useLensBalusBecomePartner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lensBalusABI, 'becomePartner'>['abi'],
        'becomePartner'
      > & { functionName?: 'becomePartner' }
    : UseContractWriteConfig<TMode, typeof lensBalusABI, 'becomePartner'> & {
        abi?: never
        functionName?: 'becomePartner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensBalusABI, 'becomePartner'>({
    abi: lensBalusABI,
    functionName: 'becomePartner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"createAnnouncement"`.
 */
export function useLensBalusCreateAnnouncement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensBalusABI,
          'createAnnouncement'
        >['abi'],
        'createAnnouncement'
      > & { functionName?: 'createAnnouncement' }
    : UseContractWriteConfig<
        TMode,
        typeof lensBalusABI,
        'createAnnouncement'
      > & {
        abi?: never
        functionName?: 'createAnnouncement'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensBalusABI, 'createAnnouncement'>({
    abi: lensBalusABI,
    functionName: 'createAnnouncement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"post"`.
 */
export function useLensBalusPost<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lensBalusABI, 'post'>['abi'],
        'post'
      > & { functionName?: 'post' }
    : UseContractWriteConfig<TMode, typeof lensBalusABI, 'post'> & {
        abi?: never
        functionName?: 'post'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensBalusABI, 'post'>({
    abi: lensBalusABI,
    functionName: 'post',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensBalusABI}__.
 */
export function usePrepareLensBalusWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensBalusABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensBalusABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensBalusABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"becomePartner"`.
 */
export function usePrepareLensBalusBecomePartner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensBalusABI, 'becomePartner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensBalusABI,
    functionName: 'becomePartner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensBalusABI, 'becomePartner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"createAnnouncement"`.
 */
export function usePrepareLensBalusCreateAnnouncement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensBalusABI, 'createAnnouncement'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensBalusABI,
    functionName: 'createAnnouncement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensBalusABI, 'createAnnouncement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensBalusABI}__ and `functionName` set to `"post"`.
 */
export function usePrepareLensBalusPost(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensBalusABI, 'post'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensBalusABI,
    functionName: 'post',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensBalusABI, 'post'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensBalusABI}__.
 */
export function useLensBalusEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof lensBalusABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: lensBalusABI,
    ...config,
  } as UseContractEventConfig<typeof lensBalusABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensBalusABI}__ and `eventName` set to `"AnnouncementCreated"`.
 */
export function useLensBalusAnnouncementCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensBalusABI, 'AnnouncementCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lensBalusABI,
    eventName: 'AnnouncementCreated',
    ...config,
  } as UseContractEventConfig<typeof lensBalusABI, 'AnnouncementCreated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lensBalusDeploymentABI}__.
 */
export function useLensBalusDeployment(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lensBalusDeploymentABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensBalusDeploymentABI}__.
 */
export function useLensBalusDeploymentRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof lensBalusDeploymentABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensBalusDeploymentABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lensBalusDeploymentABI,
    ...config,
  } as UseContractReadConfig<
    typeof lensBalusDeploymentABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensBalusDeploymentABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useLensBalusDeploymentIsScript<
  TSelectData = ReadContractResult<typeof lensBalusDeploymentABI, 'IS_SCRIPT'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensBalusDeploymentABI,
      'IS_SCRIPT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensBalusDeploymentABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<
    typeof lensBalusDeploymentABI,
    'IS_SCRIPT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensBalusDeploymentABI}__.
 */
export function useLensBalusDeploymentWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensBalusDeploymentABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof lensBalusDeploymentABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensBalusDeploymentABI, TFunctionName>({
    abi: lensBalusDeploymentABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensBalusDeploymentABI}__ and `functionName` set to `"run"`.
 */
export function useLensBalusDeploymentRun<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lensBalusDeploymentABI, 'run'>['abi'],
        'run'
      > & { functionName?: 'run' }
    : UseContractWriteConfig<TMode, typeof lensBalusDeploymentABI, 'run'> & {
        abi?: never
        functionName?: 'run'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensBalusDeploymentABI, 'run'>({
    abi: lensBalusDeploymentABI,
    functionName: 'run',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensBalusDeploymentABI}__ and `functionName` set to `"setUp"`.
 */
export function useLensBalusDeploymentSetUp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensBalusDeploymentABI,
          'setUp'
        >['abi'],
        'setUp'
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<TMode, typeof lensBalusDeploymentABI, 'setUp'> & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensBalusDeploymentABI, 'setUp'>({
    abi: lensBalusDeploymentABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensBalusDeploymentABI}__.
 */
export function usePrepareLensBalusDeploymentWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensBalusDeploymentABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensBalusDeploymentABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensBalusDeploymentABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensBalusDeploymentABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareLensBalusDeploymentRun(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensBalusDeploymentABI, 'run'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensBalusDeploymentABI,
    functionName: 'run',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensBalusDeploymentABI, 'run'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensBalusDeploymentABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareLensBalusDeploymentSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensBalusDeploymentABI, 'setUp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensBalusDeploymentABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensBalusDeploymentABI, 'setUp'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lensCampaignPublisherABI}__.
 */
export function useLensCampaignPublisher(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lensCampaignPublisherABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensCampaignPublisherABI}__.
 */
export function useLensCampaignPublisherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof lensCampaignPublisherABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensCampaignPublisherABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lensCampaignPublisherABI,
    ...config,
  } as UseContractReadConfig<
    typeof lensCampaignPublisherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"HUB"`.
 */
export function useLensCampaignPublisherHub<
  TSelectData = ReadContractResult<typeof lensCampaignPublisherABI, 'HUB'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensCampaignPublisherABI, 'HUB', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensCampaignPublisherABI,
    functionName: 'HUB',
    ...config,
  } as UseContractReadConfig<
    typeof lensCampaignPublisherABI,
    'HUB',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"campaigns"`.
 */
export function useLensCampaignPublisherCampaigns<
  TSelectData = ReadContractResult<
    typeof lensCampaignPublisherABI,
    'campaigns'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensCampaignPublisherABI,
      'campaigns',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensCampaignPublisherABI,
    functionName: 'campaigns',
    ...config,
  } as UseContractReadConfig<
    typeof lensCampaignPublisherABI,
    'campaigns',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__.
 */
export function useLensCampaignPublisherWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensCampaignPublisherABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof lensCampaignPublisherABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lensCampaignPublisherABI,
    TFunctionName
  >({ abi: lensCampaignPublisherABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"addPublishment"`.
 */
export function useLensCampaignPublisherAddPublishment<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensCampaignPublisherABI,
          'addPublishment'
        >['abi'],
        'addPublishment'
      > & { functionName?: 'addPublishment' }
    : UseContractWriteConfig<
        TMode,
        typeof lensCampaignPublisherABI,
        'addPublishment'
      > & {
        abi?: never
        functionName?: 'addPublishment'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lensCampaignPublisherABI,
    'addPublishment'
  >({
    abi: lensCampaignPublisherABI,
    functionName: 'addPublishment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"createCampaign"`.
 */
export function useLensCampaignPublisherCreateCampaign<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensCampaignPublisherABI,
          'createCampaign'
        >['abi'],
        'createCampaign'
      > & { functionName?: 'createCampaign' }
    : UseContractWriteConfig<
        TMode,
        typeof lensCampaignPublisherABI,
        'createCampaign'
      > & {
        abi?: never
        functionName?: 'createCampaign'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lensCampaignPublisherABI,
    'createCampaign'
  >({
    abi: lensCampaignPublisherABI,
    functionName: 'createCampaign',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"postPublishments"`.
 */
export function useLensCampaignPublisherPostPublishments<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensCampaignPublisherABI,
          'postPublishments'
        >['abi'],
        'postPublishments'
      > & { functionName?: 'postPublishments' }
    : UseContractWriteConfig<
        TMode,
        typeof lensCampaignPublisherABI,
        'postPublishments'
      > & {
        abi?: never
        functionName?: 'postPublishments'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lensCampaignPublisherABI,
    'postPublishments'
  >({
    abi: lensCampaignPublisherABI,
    functionName: 'postPublishments',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"test"`.
 */
export function useLensCampaignPublisherTest<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensCampaignPublisherABI,
          'test'
        >['abi'],
        'test'
      > & { functionName?: 'test' }
    : UseContractWriteConfig<TMode, typeof lensCampaignPublisherABI, 'test'> & {
        abi?: never
        functionName?: 'test'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensCampaignPublisherABI, 'test'>({
    abi: lensCampaignPublisherABI,
    functionName: 'test',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__.
 */
export function usePrepareLensCampaignPublisherWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lensCampaignPublisherABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensCampaignPublisherABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensCampaignPublisherABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"addPublishment"`.
 */
export function usePrepareLensCampaignPublisherAddPublishment(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lensCampaignPublisherABI,
      'addPublishment'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensCampaignPublisherABI,
    functionName: 'addPublishment',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensCampaignPublisherABI,
    'addPublishment'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"createCampaign"`.
 */
export function usePrepareLensCampaignPublisherCreateCampaign(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lensCampaignPublisherABI,
      'createCampaign'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensCampaignPublisherABI,
    functionName: 'createCampaign',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensCampaignPublisherABI,
    'createCampaign'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"postPublishments"`.
 */
export function usePrepareLensCampaignPublisherPostPublishments(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lensCampaignPublisherABI,
      'postPublishments'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensCampaignPublisherABI,
    functionName: 'postPublishments',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensCampaignPublisherABI,
    'postPublishments'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensCampaignPublisherABI}__ and `functionName` set to `"test"`.
 */
export function usePrepareLensCampaignPublisherTest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensCampaignPublisherABI, 'test'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensCampaignPublisherABI,
    functionName: 'test',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensCampaignPublisherABI, 'test'>)
}
